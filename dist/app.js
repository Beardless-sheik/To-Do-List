(()=>{"use strict";var n={28:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,"body {\r\n  background-color: rgba(238, 230, 230, 0.897);\r\n}\r\n\r\n.app-container {\r\n  background-color: white;\r\n  box-shadow: 15px 15px 6px 2px #c9c9c9;\r\n  margin: 30px;\r\n  padding: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n}\r\n\r\n.main-list {\r\n  display: grid;\r\n  grid-template-columns: 7fr 1fr;\r\n  border-bottom: 1px solid rgba(230, 216, 216, 0.678);\r\n  padding: 0;\r\n}\r\n\r\n.list-item {\r\n  display: grid;\r\n  grid-template-columns: 1fr 30fr 1fr 1fr;\r\n  border-bottom: 1px solid rgba(230, 216, 216, 0.678);\r\n}\r\n\r\n.bookList {\r\n  padding-left: 0;\r\n}\r\n\r\n.clear-button {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n}\r\n\r\n.center-grid {\r\n  justify-self: start;\r\n  margin-left: 30px;\r\n  align-self: center;\r\n}\r\n\r\n.position-grid-end {\r\n  justify-self: end;\r\n  margin-right: 15px;\r\n  align-self: center;\r\n}\r\n\r\n.position-grid-start {\r\n  justify-self: start;\r\n  margin-left: 15px;\r\n  align-self: center;\r\n}\r\n\r\n.task-input {\r\n  width: 100%;\r\n  border: none;\r\n  height: 3rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,4CAA4C;AAC9C;;AAEA;EACE,uBAAuB;EACvB,qCAAqC;EACrC,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mDAAmD;EACnD,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uCAAuC;EACvC,mDAAmD;AACrD;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;AACd",sourcesContent:["body {\r\n  background-color: rgba(238, 230, 230, 0.897);\r\n}\r\n\r\n.app-container {\r\n  background-color: white;\r\n  box-shadow: 15px 15px 6px 2px #c9c9c9;\r\n  margin: 30px;\r\n  padding: 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n}\r\n\r\n.main-list {\r\n  display: grid;\r\n  grid-template-columns: 7fr 1fr;\r\n  border-bottom: 1px solid rgba(230, 216, 216, 0.678);\r\n  padding: 0;\r\n}\r\n\r\n.list-item {\r\n  display: grid;\r\n  grid-template-columns: 1fr 30fr 1fr 1fr;\r\n  border-bottom: 1px solid rgba(230, 216, 216, 0.678);\r\n}\r\n\r\n.bookList {\r\n  padding-left: 0;\r\n}\r\n\r\n.clear-button {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n}\r\n\r\n.center-grid {\r\n  justify-self: start;\r\n  margin-left: 30px;\r\n  align-self: center;\r\n}\r\n\r\n.position-grid-end {\r\n  justify-self: end;\r\n  margin-right: 15px;\r\n  align-self: center;\r\n}\r\n\r\n.position-grid-start {\r\n  justify-self: start;\r\n  margin-left: 15px;\r\n  align-self: center;\r\n}\r\n\r\n.task-input {\r\n  width: 100%;\r\n  border: none;\r\n  height: 3rem;\r\n}\r\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&i[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),t.push(l))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,i=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,i,a=[],o=!0,s=!1;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(a.push(r.value),!t||a.length!==t);o=!0);}catch(n){s=!0,i=n}finally{try{o||null==e.return||e.return()}finally{if(s)throw i}}return a}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if(!o)return a;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),d=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[a].concat(d).concat([c]).join("\n")}return[a].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var p=e(u),A={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(t[p].references++,t[p].updater(A)):t.push({identifier:u,updater:i(A,r),references:1}),o.push(u)}return o}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=e(a[o]);t[s].references--}for(var l=r(n,i),c=0;c<a.length;c++){var d=e(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,i=e.media,a=e.sourceMap;i?n.setAttribute("media",i):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(795),i=e.n(r),a=e(569),o=e.n(a),s=e(565),l=e.n(s),c=e(216),d=e.n(c),u=e(589),p=e.n(u),A=e(28),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=o().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),t()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const g=n=>{for(let t=0;t<n.length;t+=1)n[t].index=t};let m=[];const b=document.getElementById("bookList"),h=document.getElementById("task-input"),v=()=>{const n=localStorage.getItem("tasksList");if(void 0!==n){const t=JSON.parse(n);m=t||[]}},E=()=>{b.innerHTML="",m?m.forEach((n=>{!0===n.completed?b.innerHTML+=`\n    <li class="list-item" draggable="true">\n      <input type="checkbox" class="position-grid-start" id="${n.index}" checked/>\n      <p contenteditable="true" class="editable"> ${n.description} </p>\n      <i class="fas fa-ellipsis-v position-grid-end"></i>\n      <i id="${n.index}" class="fas fa-trash-alt position-grid-end delete-button"></i>\n    <li>   \n    `:b.innerHTML+=`\n    <li class="list-item" draggable="true">\n    <input type="checkbox" class="position-grid-start" id="${n.index}"/>\n      <p contenteditable="true" class="editable"> ${n.description} </p>\n      <i class="fas fa-ellipsis-v position-grid-end"></i>\n      <i id="${n.index}" class="fas fa-trash-alt position-grid-end delete-button"></i>\n    <li>   \n    `})):b.innerHTML+='\n    <li class="list-item" draggable="true">\n      <p > No Tasks </p>\n    <li>   \n    ',b.innerHTML+='<button id="clear-button" class="clear-button"> Clear All Completed </button>'};document.addEventListener("DOMContentLoaded",(()=>{v(),function(n){const t=JSON.parse(localStorage.getItem("tasksList"));n.addEventListener("change",(n=>{const{target:e}=n,r=t.findIndex((n=>n.index===parseInt(e.id,10)));t[r].completed=!t[r].completed,localStorage.setItem("tasksList",JSON.stringify(t))}))}(b),b.addEventListener("input",(n=>{const{target:t}=n;if(-1!==t.classList.value.indexOf("editable")){const n=JSON.parse(localStorage.getItem("tasksList")),e=t.previousElementSibling,r=n.findIndex((n=>n.index===parseInt(e.id,10)));n[r].description=t.innerHTML,localStorage.setItem("tasksList",JSON.stringify(n))}})),b.addEventListener("click",(n=>{if("clear-button"===n.target.id){const n=JSON.parse(localStorage.getItem("tasksList")).filter((n=>!1===n.completed));g(n),localStorage.setItem("tasksList",JSON.stringify(n)),window.location.reload()}}))})),document.addEventListener("DOMContentLoaded",E),h.addEventListener("keypress",(n=>{if("Enter"===n.key){let n;n=m?{description:h.value,completed:!1,index:m.length+1}:{description:h.value,completed:!1,index:0},m=((n,t)=>{let e;return t?e=[...t,n]:e.push(n),g(e),e})(n,m),(n=>{localStorage.setItem("tasksList",JSON.stringify(n))})(m),E(),window.location.reload()}})),b.addEventListener("click",(n=>{const{target:t}=n;if(-1!==t.classList.value.indexOf("delete")){const n=JSON.parse(localStorage.getItem("tasksList")),e=((n,t)=>t.filter((t=>t.index!==n)))(n.findIndex((n=>n.index===parseInt(t.id,10))),n);g(e),localStorage.setItem("tasksList",JSON.stringify(e)),v(),E()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,